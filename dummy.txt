import pymongo
import os
from flask import Flask, jsonify, request, abort, send_from_directory, render_template, url_for, redirect
from bson.objectid import ObjectId
from bson.json_util import dumps
from werkzeug.security import generate_password_hash, check_password_hash
# from flask_jwt_extended import JWTManager, create_access_token, get_jwt_identity, jwt_required
from datetime import datetime
from flask_cors import CORS
from dotenv import load_dotenv
load_dotenv()

ADMIN_USERNAME = os.getenv("ADMIN_USERNAME")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")

app = Flask(__name__)
CORS(app)
app.config['JWT_SECRET_KEY'] = 'xxcode100xx'
jwt = JWTManager(app)

client = pymongo.MongoClient("mongodb://localhost:27017")
db = client["Shlokdb"]
users_collection = db["users"]
tasks_collection = db["tasks"]
attendance_collection = db["attendance"]
chats_collection = db["chats"]

# Serve the frontend application
@app.route('/')
def redirect_to_login():
    return redirect(url_for('serve_login'))

@app.route('/login')
def serve_login():
    return send_from_directory('static', 'login.html')

# Authenticate a user and return a JWT token
@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username', None)
    password = request.json.get('password', None)
    
    if not username or not password:
        return jsonify({"msg": "Missing username or password"}), 400
    
    user = users_collection.find_one({"username": username})
    if not user or not check_password_hash(user['password'], password):
        return jsonify({"msg": "Bad username or password"}), 401
    
    access_token = create_access_token(identity=username)
    check_in(username)
    return jsonify(access_token=access_token), 200

# Log out a user and record the check-out time
@app.route('/logout', methods=['POST'])
@jwt_required()
def logout():
    username = get_jwt_identity()
    check_out(username)
    return jsonify({"msg": "Logged out successfully"}), 200

# Admin creates a new user
@app.route('/create-user', methods=['POST'])
@jwt_required()
def create_user():
    if not is_admin(get_jwt_identity()):
        return jsonify({"msg": "Admin access required"}), 403
    
    username = request.json.get('username', None)
    password = request.json.get('password', None)
    if not username or not password:
        return jsonify({"msg": "Missing username or password"}), 400
    
    if users_collection.find_one({"username": username}):
        return jsonify({"msg": "Username already exists"}), 400
    
    hashed_password = generate_password_hash(password)
    users_collection.insert_one({
        "username": username,
        "password": hashed_password,
        "is_admin": False
    })
    return jsonify({"msg": "User created successfully"}), 201

# Complete a task for the logged-in user
@app.route('/complete-task', methods=['POST'])
@jwt_required()
def complete_task():
    username = get_jwt_identity()
    task_description = request.json.get('task_description', None)
    if not task_description:
        return jsonify({"msg": "Task description is required"}), 400
    
    tasks_collection.insert_one({
        "username": username,
        "description": task_description,
        "completed_at": datetime.now()
    })
    return jsonify({"msg": "Task completed successfully"}), 200

# Get attendance data (Admin access required)
@app.route('/attendance', methods=['GET'])
@jwt_required()
def get_attendance():
    if not is_admin(get_jwt_identity()):
        return jsonify({"msg": "Admin access required"}), 403
    attendance = list(attendance_collection.find())
    return dumps(attendance), 200

# Post a chat message
@app.route('/chat', methods=['POST'])
@jwt_required()
def post_message():
    username = get_jwt_identity()
    message = request.json.get('message', None)
    if not message:
        return jsonify({"msg": "Message is required"}), 400
    
    chats_collection.insert_one({
        "username": username,
        "message": message,
        "timestamp": datetime.now()
    })
    return jsonify({"msg": "Message posted successfully"}), 201

# Get the latest chat messages
@app.route('/chat', methods=['GET'])
@jwt_required()
def get_messages():
    chats = list(chats_collection.find().sort("timestamp", -1).limit(100))
    return dumps(chats), 200

# Delete a user (Admin access required)
@app.route('/delete-user', methods=['DELETE'])
@jwt_required()
def delete_user():
    if not is_admin(get_jwt_identity()):
        return jsonify({"msg": "Admin access required"}), 403
    
    username = request.json.get('username', None)
    if not username:
        return jsonify({"msg": "Invalid username"}), 400
    
    result = users_collection.delete_one({"username": username})
    if result.deleted_count == 0:
        return jsonify({"msg": "User not found"}), 404
    return jsonify({"msg": "User deleted successfully"}), 200

# Delete a chat message (Admin access required)
@app.route('/delete-chat', methods=['DELETE'])
@jwt_required()
def delete_chat():
    if not is_admin(get_jwt_identity()):
        return jsonify({"msg": "Admin access required"}), 403
    
    chat_id = request.json.get('chat_id', None)
    if not chat_id:
        return jsonify({"msg": "Invalid chat ID"}), 400
    
    result = chats_collection.delete_one({"_id": ObjectId(chat_id)})
    if result.deleted_count == 0:
        return jsonify({"msg": "Chat message not found"}), 404
    return jsonify({"msg": "Chat message deleted successfully"}), 200


@app.route('/dashboard')
@jwt_required()
def dashboard():
    username = get_jwt_identity()
    user = users_collection.find_one({"username": username})

    if user.get('is_admin', False):
        return send_from_directory('static', 'admin_dashboard.html')
    else:
        return send_from_directory('static', 'user_dashboard.html')

# Record check-in time for attendance
def check_in(username):
    attendance_collection.update_one(
        {"username": username, "check_out": None},
        {"$set": {"check_in": datetime.now()}},
        upsert=True
    )

# Record check-out time for attendance
def check_out(username):
    attendance_collection.update_one(
        {"username": username, "check_out": None},
        {"$set": {"check_out": datetime.now()}}
    )

# Check if a user is an admin
def is_admin(username):
    user = users_collection.find_one({"username": username})
    return user and user.get('is_admin', False)

if __name__ == '__main__':
    admin = users_collection.find_one({"username": "ADMIN_USERNAME"})
    if not admin:
        users_collection.insert_one({
            "username": "ADMIN_USERNAME",
            "password": generate_password_hash("ADMIN_PASSWORD"),
            "is_admin": True
        })
    app.run(debug=True)
